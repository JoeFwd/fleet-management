import { Location as DomainLocation } from '@backend/Domain/Entities/Location.js';
import { Location as PersistentLocation } from '../Entities/Location.js';
import { EntityMapper } from '@backend/Infra/Mappers/EntityMapper.js';

/**
 * Maps a the location domain entity to the persistent entity and vice-versa.
 */
export class LocationMapper implements EntityMapper<DomainLocation, PersistentLocation> {
  public toDomain(entity: PersistentLocation): DomainLocation {
    if (!entity) throw new Error('LocationMapper requires an entity');
    return new DomainLocation(+entity.latitude, +entity.longitude, +entity.altitude);
  }

  public toInfra(domainEntity: DomainLocation, infraEntity?: PersistentLocation): PersistentLocation {
    if (!domainEntity) throw new Error('LocationMapper requires a domain entity');
    // id is auto-generated by the database.
    const location = infraEntity || new PersistentLocation();
    location.latitude = domainEntity.latitude.get().toString();
    location.longitude = domainEntity.longitude.get().toString();
    location.altitude = domainEntity.altitude.get().toString();
    return location;
  }
}
